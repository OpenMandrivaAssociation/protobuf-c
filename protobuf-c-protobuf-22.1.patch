diff -up protobuf-c-1.4.1/build-cmake/CMakeLists.txt.omv~ protobuf-c-1.4.1/build-cmake/CMakeLists.txt
--- protobuf-c-1.4.1/build-cmake/CMakeLists.txt.omv~	2023-03-08 23:28:08.230693626 +0100
+++ protobuf-c-1.4.1/build-cmake/CMakeLists.txt	2023-03-08 23:29:15.415305393 +0100
@@ -88,7 +88,7 @@ if (MSVC AND NOT BUILD_SHARED_LIBS)
 endif (MSVC AND NOT BUILD_SHARED_LIBS)
 
 IF(BUILD_PROTOC)
-SET(CMAKE_CXX_STANDARD 11)
+SET(CMAKE_CXX_STANDARD 17)
 SET(CMAKE_CXX_STANDARD_REQUIRED ON)
 SET(CMAKE_CXX_EXTENSIONS OFF)
 ADD_CUSTOM_COMMAND(OUTPUT protobuf-c/protobuf-c.pb.cc protobuf-c/protobuf-c.pb.h
@@ -97,7 +97,7 @@ ADD_CUSTOM_COMMAND(OUTPUT protobuf-c/pro
 FILE(GLOB PROTOC_GEN_C_SRC ${MAIN_DIR}/protoc-c/*.h ${MAIN_DIR}/protoc-c/*.cc )
 ADD_EXECUTABLE(protoc-gen-c ${PROTOC_GEN_C_SRC} protobuf-c/protobuf-c.pb.cc protobuf-c/protobuf-c.pb.h)
 
-TARGET_LINK_LIBRARIES(protoc-gen-c ${PROTOBUF_PROTOC_LIBRARY} ${PROTOBUF_LIBRARY})
+TARGET_LINK_LIBRARIES(protoc-gen-c ${PROTOBUF_PROTOC_LIBRARY} ${PROTOBUF_LIBRARY} -labsl_hash -labsl_log_internal_check_op -labsl_log_internal_message -labsl_raw_hash_set -labsl_raw_logging_internal -labsl_spinlock_wait)
 
 IF (MSVC AND BUILD_SHARED_LIBS)
 	TARGET_COMPILE_DEFINITIONS(protoc-gen-c PRIVATE -DPROTOBUF_USE_DLLS)
diff -up protobuf-c-1.4.1/Makefile.am.omv~ protobuf-c-1.4.1/Makefile.am
--- protobuf-c-1.4.1/Makefile.am.omv~	2023-03-08 22:51:48.690844836 +0100
+++ protobuf-c-1.4.1/Makefile.am	2023-03-08 23:09:56.838755630 +0100
@@ -108,7 +108,7 @@ protoc_c_protoc_gen_c_CXXFLAGS = \
 	$(protobuf_CFLAGS)
 protoc_c_protoc_gen_c_LDADD = \
 	$(protobuf_LIBS) \
-	-lprotoc
+	-lprotoc -labsl_hash -labsl_log_internal_check_op -labsl_log_internal_message -labsl_raw_hash_set -labsl_raw_logging_internal -labsl_spinlock_wait
 
 protobuf-c/protobuf-c.pb.cc protobuf-c/protobuf-c.pb.h: @PROTOC@ $(top_srcdir)/protobuf-c/protobuf-c.proto
 	$(AM_V_GEN)@PROTOC@ -I$(top_srcdir) --cpp_out=$(top_builddir) $(top_srcdir)/protobuf-c/protobuf-c.proto
@@ -171,7 +171,7 @@ t_generated_code2_cxx_generate_packed_da
 	$(AM_CXXFLAGS) \
 	$(protobuf_CFLAGS)
 t_generated_code2_cxx_generate_packed_data_LDADD = \
-	$(protobuf_LIBS)
+	$(protobuf_LIBS) -labsl_hash -labsl_log_internal_check_op -labsl_log_internal_message -labsl_raw_hash_set -labsl_raw_logging_internal -labsl_spinlock_wait
 
 t/test.pb-c.c t/test.pb-c.h: $(top_builddir)/protoc-c/protoc-gen-c$(EXEEXT) $(top_srcdir)/t/test.proto
 	$(AM_V_GEN)@PROTOC@ --plugin=protoc-gen-c=$(top_builddir)/protoc-c/protoc-gen-c$(EXEEXT) -I$(top_srcdir) --c_out=$(top_builddir) $(top_srcdir)/t/test.proto
diff -up protobuf-c-1.4.1/protoc-c/c_enum_field.h.omv~ protobuf-c-1.4.1/protoc-c/c_enum_field.h
diff -up protobuf-c-1.4.1/protoc-c/c_enum.h.omv~ protobuf-c-1.4.1/protoc-c/c_enum.h
--- protobuf-c-1.4.1/protoc-c/c_enum.h.omv~	2023-03-08 22:36:35.122511289 +0100
+++ protobuf-c-1.4.1/protoc-c/c_enum.h	2023-03-08 22:36:42.358577433 +0100
@@ -66,6 +66,11 @@
 #include <string>
 #include <google/protobuf/descriptor.h>
 
+#undef GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
+#define GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TypeName) \
+  TypeName(const TypeName&) = delete;               \
+  void operator=(const TypeName&) = delete
+
 namespace google {
 namespace protobuf {
   namespace io {
diff -up protobuf-c-1.4.1/protoc-c/c_enum..omv~ protobuf-c-1.4.1/protoc-c/c_enum.
diff -up protobuf-c-1.4.1/protoc-c/c_extension.h.omv~ protobuf-c-1.4.1/protoc-c/c_extension.h
--- protobuf-c-1.4.1/protoc-c/c_extension.h.omv~	2023-03-08 22:37:27.849993181 +0100
+++ protobuf-c-1.4.1/protoc-c/c_extension.h	2023-03-08 22:37:35.707064976 +0100
@@ -66,6 +66,11 @@
 #include <string>
 #include <google/protobuf/stubs/common.h>
 
+#undef GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
+#define GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TypeName) \
+  TypeName(const TypeName&) = delete;               \
+  void operator=(const TypeName&) = delete
+
 namespace google {
 namespace protobuf {
   class FieldDescriptor;       // descriptor.h
diff -up protobuf-c-1.4.1/protoc-c/c_field.cc.omv~ protobuf-c-1.4.1/protoc-c/c_field.cc
--- protobuf-c-1.4.1/protoc-c/c_field.cc.omv~	2023-03-08 22:39:21.702033117 +0100
+++ protobuf-c-1.4.1/protoc-c/c_field.cc	2023-03-08 22:39:29.597105207 +0100
@@ -231,7 +231,7 @@ FieldGeneratorMap::~FieldGeneratorMap()
 
 const FieldGenerator& FieldGeneratorMap::get(
     const FieldDescriptor* field) const {
-  GOOGLE_CHECK_EQ(field->containing_type(), descriptor_);
+//  GOOGLE_CHECK_EQ(field->containing_type(), descriptor_);
   return *field_generators_[field->index()];
 }
 
diff -up protobuf-c-1.4.1/protoc-c/c_field.h.omv~ protobuf-c-1.4.1/protoc-c/c_field.h
--- protobuf-c-1.4.1/protoc-c/c_field.h.omv~	2023-03-08 22:35:50.056099287 +0100
+++ protobuf-c-1.4.1/protoc-c/c_field.h	2023-03-08 22:36:19.072364573 +0100
@@ -67,6 +67,11 @@
 #include <google/protobuf/stubs/common.h>
 #include <google/protobuf/descriptor.h>
 
+#undef GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
+#define GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TypeName) \
+  TypeName(const TypeName&) = delete;               \
+  void operator=(const TypeName&) = delete
+
 namespace google {
 namespace protobuf {
   namespace io {
diff -up protobuf-c-1.4.1/protoc-c/c_generator.h.omv~ protobuf-c-1.4.1/protoc-c/c_generator.h
--- protobuf-c-1.4.1/protoc-c/c_generator.h.omv~	2023-03-08 22:39:43.872235542 +0100
+++ protobuf-c-1.4.1/protoc-c/c_generator.h	2023-03-08 22:40:09.959473674 +0100
@@ -68,6 +68,11 @@
 #include <string>
 #include <google/protobuf/compiler/code_generator.h>
 
+#undef GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
+#define GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TypeName) \
+  TypeName(const TypeName&) = delete;               \
+  void operator=(const TypeName&) = delete
+
 #if defined(_WIN32) && defined(PROTOBUF_C_USE_SHARED_LIB)
 # define PROTOC_C_EXPORT __declspec(dllexport)
 #else
diff -up protobuf-c-1.4.1/protoc-c/c_helpers.cc.omv~ protobuf-c-1.4.1/protoc-c/c_helpers.cc
--- protobuf-c-1.4.1/protoc-c/c_helpers.cc.omv~	2023-03-08 22:45:02.358141341 +0100
+++ protobuf-c-1.4.1/protoc-c/c_helpers.cc	2023-03-08 22:47:58.100743474 +0100
@@ -69,6 +69,11 @@
 #include <protoc-c/c_helpers.h>
 #include <google/protobuf/stubs/common.h>
 
+#undef GOOGLE_ARRAYSIZE
+#define GOOGLE_ARRAYSIZE(a) \
+  ((sizeof(a) / sizeof(*(a))) / \
+   static_cast<size_t>(!(sizeof(a) % sizeof(*(a)))))
+
 namespace google {
 namespace protobuf {
 namespace compiler {
@@ -548,7 +553,7 @@ std::string CEscape(const std::string& s
   std::unique_ptr<char[]> dest(new char[dest_length]);
   const int len = CEscapeInternal(src.data(), src.size(),
                                   dest.get(), dest_length, false);
-  GOOGLE_DCHECK_GE(len, 0);
+//  GOOGLE_DCHECK_GE(len, 0);
   return std::string(dest.get(), len);
 }
 
diff -up protobuf-c-1.4.1/protoc-c/c_message.cc.omv~ protobuf-c-1.4.1/protoc-c/c_message.cc
--- protobuf-c-1.4.1/protoc-c/c_message.cc.omv~	2023-03-08 22:48:14.341891512 +0100
+++ protobuf-c-1.4.1/protoc-c/c_message.cc	2023-03-08 22:48:42.232145740 +0100
@@ -63,6 +63,7 @@
 #include <algorithm>
 #include <map>
 #include <memory>
+#include <iostream>
 #include <protoc-c/c_message.h>
 #include <protoc-c/c_enum.h>
 #include <protoc-c/c_extension.h>
@@ -499,7 +500,7 @@ GenerateMessageDescriptor(io::Printer* p
 	  // NOTE: not supported by protobuf
 	  vars["maybe_static"] = "";
 	  vars["field_dv_ctype"] = "{ ... }";
-	  GOOGLE_LOG(DFATAL) << "Messages can't have default values!";
+	  std::cerr << "Messages can't have default values!";
 	  break;
 	case FieldDescriptor::CPPTYPE_STRING:
 	  if (fd->type() == FieldDescriptor::TYPE_BYTES || opt.string_as_bytes())
@@ -521,7 +522,7 @@ GenerateMessageDescriptor(io::Printer* p
 	    break;
 	  }
 	default:
-	  GOOGLE_LOG(DFATAL) << "Unknown CPPTYPE";
+	  std::cerr << "Unknown CPPTYPE";
 	  break;
 	}
 	if (!already_defined)
diff -up protobuf-c-1.4.1/protoc-c/c_primitive_field.cc.omv~ protobuf-c-1.4.1/protoc-c/c_primitive_field.cc
--- protobuf-c-1.4.1/protoc-c/c_primitive_field.cc.omv~	2023-03-08 22:48:57.164281815 +0100
+++ protobuf-c-1.4.1/protoc-c/c_primitive_field.cc	2023-03-08 22:49:28.508567447 +0100
@@ -64,6 +64,7 @@
 #include <protoc-c/c_helpers.h>
 #include <google/protobuf/io/printer.h>
 #include <google/protobuf/wire_format.h>
+#include <iostream>
 
 namespace google {
 namespace protobuf {
@@ -99,7 +100,7 @@ void PrimitiveFieldGenerator::GenerateSt
     case FieldDescriptor::TYPE_STRING  :
     case FieldDescriptor::TYPE_BYTES   :
     case FieldDescriptor::TYPE_GROUP   :
-    case FieldDescriptor::TYPE_MESSAGE : GOOGLE_LOG(FATAL) << "not a primitive type"; break;
+    case FieldDescriptor::TYPE_MESSAGE : std::cerr << "not a primitive type"; break;
 
     // No default because we want the compiler to complain if any new
     // types are added.
@@ -143,7 +144,7 @@ std::string PrimitiveFieldGenerator::Get
     case FieldDescriptor::CPPTYPE_BOOL:
       return descriptor_->default_value_bool() ? "1" : "0";
     default:
-      GOOGLE_LOG(DFATAL) << "unexpected CPPTYPE in c_primitive_field";
+      std::cerr << "unexpected CPPTYPE in c_primitive_field";
       return "UNEXPECTED_CPPTYPE";
   }
 }
@@ -197,7 +198,7 @@ void PrimitiveFieldGenerator::GenerateDe
     case FieldDescriptor::TYPE_STRING  :
     case FieldDescriptor::TYPE_BYTES   :
     case FieldDescriptor::TYPE_GROUP   :
-    case FieldDescriptor::TYPE_MESSAGE : GOOGLE_LOG(FATAL) << "not a primitive type"; break;
+    case FieldDescriptor::TYPE_MESSAGE : std::cerr << "not a primitive type"; break;
 
     // No default because we want the compiler to complain if any new
     // types are added.
diff -up protobuf-c-1.4.1/protoc-c/c_service.h.omv~ protobuf-c-1.4.1/protoc-c/c_service.h
--- protobuf-c-1.4.1/protoc-c/c_service.h.omv~	2023-03-08 22:49:49.078754911 +0100
+++ protobuf-c-1.4.1/protoc-c/c_service.h	2023-03-08 22:49:56.405821685 +0100
@@ -67,6 +67,11 @@
 #include <string>
 #include <google/protobuf/descriptor.h>
 
+#undef GOOGLE_DISALLOW_EVIL_CONSTRUCTORS
+#define GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TypeName) \
+  TypeName(const TypeName&) = delete;               \
+  void operator=(const TypeName&) = delete
+
 namespace google {
 namespace protobuf {
   namespace io {
